name: build-backend-image
permissions:
  contents: read

on:
    #branches: [ main ]
    tags:
          - 'v*.*.*'
          - '*.*.*'
env:
  # Ensure BuildKit features (like RUN --mount=type=cache) work
  DOCKER_BUILDKIT: "1"
  CACHE_SCOPE: backstage-backend
  IMAGE_NAME: docker.io/veecode/devportal-base

jobs:

  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Ensure tag exists in main
        run: |
          git fetch origin main
          TAG="${GITHUB_REF#refs/tags/}"
          echo "Pushed TAG=$TAG"
          SHA="$(git rev-parse "$TAG^{commit}")"
          if git merge-base --is-ancestor "$SHA" origin/main; then
            echo "OK: tag commit is reachable from main."
          else
            echo "ERROR: tag commit is not on main." >&2
            exit 1
          fi

  build:
    needs: validate-tag
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            arch: amd64
          - os: ubuntu-22.04-arm
            platform: linux/arm64
            arch: arm64
    runs-on: ${{ matrix.os }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project root version: $VERSION"

      - name: Set up Node.js + Corepack (Yarn 4)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Enable Corepack & Yarn 4
        run: |
          npm i -g corepack
          corepack enable
          corepack prepare yarn@4.10.3 --activate
          yarn config set nodeLinker node-modules
      
      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install deps & build monorepo
        run: |
          yarn install --immutable
          yarn tsc
          yarn build:all

      - name: Cache dynamic-plugins dependencies
        uses: actions/cache@v4
        with:
          path: |
            dynamic-plugins/.yarn/cache
            dynamic-plugins/node_modules
          key: ${{ runner.os }}-dynamic-plugins-${{ hashFiles('dynamic-plugins/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-dynamic-plugins-
      
      - name: Prepare dynamic plugins
        run: |
          mkdir -p dynamic-plugins-docker
          pushd dynamic-plugins
          yarn install
          yarn build
          yarn export-dynamic
          yarn copy-dynamic-plugins "$(pwd)/../dynamic-plugins-docker"
          popd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Red Hat base registry if required
      - name: Login to Red Hat registry (if needed)
        env:
          rh_user: ${{ secrets.REDHAT_USER }}
          rh_pass: ${{ secrets.REDHAT_PASS }}
        if: ${{ env.rh_user != '' && env.rh_pass != '' }}
        run: |
          echo "${{ env.rh_pass }}" | docker login registry.redhat.io -u "${{ env.rh_user }}" --password-stdin

      # login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/backend/Dockerfile
          platforms: ${{ matrix.platform }}
          # Enables your RUN --mount=type=cache lines to persist across runs
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.version }}-${{ matrix.arch }}

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project root version: $VERSION"
  
      # login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Create multi-arch manifest (SHA tag)
        run: |
          docker buildx imagetools create -t ${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.version }} \
            ${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.version }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.version }}-arm64