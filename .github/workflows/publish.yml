name: build-backend-image

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Ensure BuildKit features (like RUN --mount=type=cache) work
      DOCKER_BUILDKIT: "1"
      CACHE_SCOPE: backstage-backend
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js + Corepack (Yarn 4)
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Enable Corepack & Yarn 4
        run: |
          npm i -g corepack
          corepack enable
          corepack prepare yarn@4.4.1 --activate
          yarn config set nodeLinker node-modules
      
      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install deps & build monorepo
        run: |
          yarn install --immutable
          yarn tsc
          yarn build:all

      - name: Cache dynamic-plugins dependencies
        uses: actions/cache@v4
        with:
          path: |
            dynamic-plugins/.yarn/cache
            dynamic-plugins/node_modules
          key: ${{ runner.os }}-dynamic-plugins-${{ hashFiles('dynamic-plugins/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-dynamic-plugins-
      
      - name: Prepare dynamic plugins
        run: |
          mkdir -p dynamic-plugins-docker
          pushd dynamic-plugins
          yarn install
          yarn build
          yarn export-dynamic
          yarn copy-dynamic-plugins "$(pwd)/../dynamic-plugins-docker"
          popd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to Red Hat base registry if required
      - name: Login to Red Hat registry (if needed)
        env:
          rh_user: ${{ secrets.REDHAT_USER }}
          rh_pass: ${{ secrets.REDHAT_PASS }}
        if: ${{ env.rh_user != '' && env.rh_pass != '' }}
        run: |
          echo "${{ env.rh_pass }}" | docker login registry.redhat.io -u "${{ env.rh_user }}" --password-stdin

      - name: Build image (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./packages/backend/Dockerfile
          # Enables your RUN --mount=type=cache lines to persist across runs
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          tags: |
            ghcr.io/${{ github.repository_owner }}/backstage-backend:sha-${{ github.sha }}
